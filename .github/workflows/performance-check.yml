name: React Performance Check

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  performance-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for git history

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install React Performance Analyzer
      run: npm install -g react-performanalyzer

    - name: Run performance analysis
      id: performance
      run: |
        # Create baseline if it doesn't exist (only on main branch)
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "Creating baseline snapshot..."
          npx react-performanalyzer ci --output json,github-comment
          
          # Save baseline
          if [ -f ".performance-snapshots/baseline-main.json" ]; then
            echo "Baseline already exists"
          else
            # Create baseline from current analysis
            echo "Creating new baseline..."
            cp .performance-snapshots/snapshot-*.json .performance-snapshots/baseline-main.json || true
          fi
        else
          # Run performance check against baseline
          echo "Running performance check against baseline..."
          npx react-performanalyzer ci \
            --baseline-branch main \
            --output json,github-comment \
            --max-score-regression 5 \
            --max-high-severity-increase 2 \
            --max-total-issues-increase 10
        fi

    - name: Upload performance report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-report
        path: |
          .performance-snapshots/*.json
          .performance-snapshots/*.md
        retention-days: 30

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Find the comment file
          const snapshotDir = '.performance-snapshots';
          const files = fs.readdirSync(snapshotDir);
          const commentFile = files.find(f => f.startsWith('comment-') && f.endsWith('.md'));
          
          if (commentFile) {
            const commentPath = path.join(snapshotDir, commentFile);
            const comment = fs.readFileSync(commentPath, 'utf-8');
            
            // Post comment to PR
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } else {
            console.log('No comment file found');
          }

    - name: Check for performance regressions
      if: github.event_name == 'pull_request'
      run: |
        # Check if there are critical issues
        if [ -f ".performance-snapshots/report-*.json" ]; then
          # Read the report and check status
          REPORT_FILE=$(ls .performance-snapshots/report-*.json | head -1)
          STATUS=$(jq -r '.summary.status' "$REPORT_FILE")
          
          if [ "$STATUS" = "fail" ]; then
            echo "❌ Performance regression detected!"
            echo "Please review the performance report and fix the issues before merging."
            exit 1
          elif [ "$STATUS" = "warning" ]; then
            echo "⚠️ Performance warning detected!"
            echo "Consider reviewing the performance report."
          else
            echo "✅ Performance check passed!"
          fi
        fi

    - name: Set output variables
      if: always()
      run: |
        if [ -f ".performance-snapshots/report-*.json" ]; then
          REPORT_FILE=$(ls .performance-snapshots/report-*.json | head -1)
          STATUS=$(jq -r '.summary.status' "$REPORT_FILE")
          SCORE=$(jq -r '.summary.score' "$REPORT_FILE")
          HAS_REGRESSIONS=$(jq -r '.has_regressions' "$REPORT_FILE")
          
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          echo "has_regressions=$HAS_REGRESSIONS" >> $GITHUB_OUTPUT
        else
          echo "status=unknown" >> $GITHUB_OUTPUT
          echo "score=0" >> $GITHUB_OUTPUT
          echo "has_regressions=false" >> $GITHUB_OUTPUT
        fi

    - name: Performance Summary
      if: always()
      run: |
        echo "## 🚀 Performance Check Summary"
        echo ""
        echo "- **Status:** ${{ steps.performance.outputs.status || 'unknown' }}"
        echo "- **Score:** ${{ steps.performance.outputs.score || '0' }}/100"
        echo "- **Has Regressions:** ${{ steps.performance.outputs.has_regressions || 'false' }}"
        echo ""
        echo "📊 [View detailed report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" 